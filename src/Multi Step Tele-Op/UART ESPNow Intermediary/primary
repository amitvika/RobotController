#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <ArduinoWebsockets.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <Adafruit_BusIO_Register.h>
#include <Adafruit_Sensor.h>
#include <esp_now.h>
#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <ArduinoWebsockets.h>
#include <ArduinoJson.h>
#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <esp_now.h>
 #include <Wire.h>
 #include <Adafruit_BusIO_Register.h>
  #include <Adafruit_Sensor.h>


//string message format recieved by uart.  number values can have decimals
//mac=asdasd;h1X=0;h1Y=0;h1Z=0;h1P=0;h1Y=0;h1R=0;h2X=0;h2Y=0;h2Z=0;h2P=0;h2Y=0;h2R=0;f=0;b=0;l=0;r=0;u=0;d=0



// ------------------- UART CONFIG -------------------
#define UART_RX_PIN      16
#define UART_TX_PIN      17
#define UART_BAUD_RATE   2000000
#define MAX_LINE_LENGTH  256

// ------------------- SLAVE MACS --------------------
//78:ee:4c:11:31:8c// wheels
uint8_t slave1MAC[] = {0x78, 0xEE, 0x4C, 0x11, 0x31, 0x8C}; // wheels
//F8:B3:B7:D2:3B:00
uint8_t slave2MAC[] = {0xF8, 0xB3, 0xB7, 0xD2, 0x3B, 0x00}; // neck
//uint8_t slave2MAC[] = {0xD4, 0x8A, 0xFC, 0xC9, 0x1F, 0x30}; // neck
// f8:b3:b7:d2:3b:64//actuaotor 6 arm 1

uint8_t slave3MAC[] = {0xF8, 0xB3, 0xB7, 0xD2, 0x3B, 0x64}; // neck

//f8:b3:b7:d2:3b:68
uint8_t slave4MAC[] = {0xF8, 0xB3, 0xB7, 0xD2, 0x3B, 0x68}; // IK arm 1, actuator 6


uint8_t slave5MAC[] = {0x08, 0xA6, 0xF7, 0xB0, 0x72, 0x1C}; // IKActuatorArm2
uint8_t slave6MAC[] = {0x08, 0xA6, 0xF7, 0xB0, 0x72, 0x1C}; // IKActuatorArm2
uint8_t slave7MAC[] = {0x08, 0xA6, 0xF7, 0xB0, 0x72, 0x1C}; // IKActuatorArm2
uint8_t slave8MAC[] = {0x08, 0xA6, 0xF7, 0xB0, 0x72, 0x1C}; // IKActuatorArm2
uint8_t slave9MAC[] = {0x08, 0xA6, 0xF7, 0xB0, 0x72, 0x1C}; // IKActuatorArm2
uint8_t slave10MAC[] = {0x08, 0xA6, 0xF7, 0xB0, 0x72, 0x1C}; // IKActuatorArm2
uint8_t slave11MAC[] = {0x08, 0xA6, 0xF7, 0xB0, 0x72, 0x1C}; // IKActuatorArm2
uint8_t slave12MAC[] = {0x08, 0xA6, 0xF7, 0xB0, 0x72, 0x1C}; // IKActuatorArm2
uint8_t slave13MAC[] = {0x08, 0xA6, 0xF7, 0xB0, 0x72, 0x1C}; // IKActuatorArm2
uint8_t slave14MAC[] = {0x08, 0xA6, 0xF7, 0xB0, 0x72, 0x1C}; // IKActuatorArm2


uint8_t* slaves[]     = { slave1MAC, slave2MAC, slave3MAC, slave4MAC, slave5MAC, slave6MAC, slave7MAC, slave8MAC, slave9MAC, slave10MAC, slave11MAC, slave12MAC, slave13MAC, slave14MAC };
static const int numSlaves = 14;

// Track which peers were successfully added
bool peerAdded[numSlaves] = { false, false, false };

// ------------------- ESPNOW CALLBACK ----------------
void onDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  // Empty to avoid overhead; no Serial prints here.
}

// ------------------- SETUP --------------------------
void setup() {
  // Optional debug â€“ remove if you want absolute minimal overhead
  Serial.begin(115200);

  // Set up UART to communicate with the Wi-Fi receiver
  Serial2.begin(UART_BAUD_RATE, SERIAL_8N1, UART_RX_PIN, UART_TX_PIN);

  // Set Wi-Fi mode and disable power saving for minimal latency
  WiFi.mode(WIFI_STA);
  esp_wifi_set_ps(WIFI_PS_NONE);
  WiFi.disconnect();

  // Initialize ESPNOW
  if (esp_now_init() == ESP_OK) {
    esp_now_register_send_cb(onDataSent);

    // Add peers
    for (int i = 0; i < numSlaves; i++) {
      esp_now_peer_info_t peerInfo = {};
      memcpy(peerInfo.peer_addr, slaves[i], 6);
      peerInfo.channel = 0;   // same channel as master
      peerInfo.encrypt = false;

      if (esp_now_add_peer(&peerInfo) == ESP_OK) {
        peerAdded[i] = true;
      }
    }
  }
}

// ------------------- MAIN LOOP ----------------------
void loop() {
  static char buffer[MAX_LINE_LENGTH];
  static int  idx = 0;

  // Continuously read from UART
  while (Serial2.available() > 0) {
    char c = (char)Serial2.read();

    if (c == '\n') {
      // Null-terminate the line
      buffer[idx] = '\0';
      Serial.println(buffer);
      // Send data to all valid peers (non-blocking)
      if (idx > 0) {
        for (int i = 0; i < numSlaves; i++) {
          if (peerAdded[i]) {
            esp_now_send(slaves[i], (uint8_t*)buffer, idx + 1);
          }
        }
      }

      // Reset for the next line
      idx = 0;
    } 
    else {
      // Accumulate characters, reset if length exceeded
      if (idx < MAX_LINE_LENGTH - 1) {
        buffer[idx++] = c;
      } else {
        idx = 0;
      }
    }
  }

  // No delays here to keep the loop running as fast as possible
}
