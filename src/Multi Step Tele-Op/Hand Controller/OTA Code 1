#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <esp_now.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <Adafruit_BusIO_Register.h>
#include <Adafruit_Sensor.h>
#include <HTTPClient.h>
#include <math.h>
#include "Adafruit_VL53L0X.h"
#include <ArduinoOTA.h>

// WiFi credentials
const char* ssid = "The Best Is Yet To Come!";
const char* password = "blessings1";

// Define pin assignments based on your wiring
const int powerPin = 33; // Using digital pin 33 to provide "VCC"
const int xPin = 32;     // Analog input for VRX (X-axis)
const int yPin = 35;     // Analog input for VRY (Y-axis)
const int swPin = 34;    // Digital input for the joystick's button (SW)

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  // Connect to WiFi (required for OTA)
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("Connected, IP address: ");
  Serial.println(WiFi.localIP());

  // Set up OTA callbacks
  ArduinoOTA.onStart([]() {
    Serial.println("OTA Update Starting...");
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nOTA Update Complete.");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("OTA Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("OTA Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) Serial.println("Authentication Failed");
    else if (error == OTA_BEGIN_ERROR) Serial.println("Initialization Failed");
    else if (error == OTA_CONNECT_ERROR) Serial.println("Connection Failed");
    else if (error == OTA_RECEIVE_ERROR) Serial.println("Reception Failed");
    else if (error == OTA_END_ERROR) Serial.println("Finalization Failed");
  });
  ArduinoOTA.begin();
  Serial.println("OTA Ready");

  // Set up the power pin as output and drive it HIGH.
  // This will output approximately 3.3V, not 5V.
  pinMode(powerPin, OUTPUT);
  digitalWrite(powerPin, HIGH);
  
  // Set up the joystick button pin with an internal pull-up resistor.
  pinMode(swPin, INPUT_PULLUP);
}

void loop() {
  // Handle OTA updates
  ArduinoOTA.handle();
  
  // Read the analog values for the joystick axes.
  int xValue = analogRead(xPin);
  int yValue = analogRead(yPin);
  
  // Read the digital state of the joystick button.
  int buttonState = digitalRead(swPin);
  
  // Print the values to the Serial Monitor.
  Serial.print("X: ");
  Serial.print(xValue);
  Serial.print("  Y: ");
  Serial.print(yValue);
  Serial.print("  Button: ");
  Serial.println(buttonState);
  
  delay(100); // Delay for readability.
}
