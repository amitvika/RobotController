#include <Arduino.h>
#include <WiFi.h>
#include <ArduinoWebsockets.h>
#include <ArduinoJson.h>

using namespace websockets;

// Wi-Fi credentials
const char* ssid = "The Best Is Yet To Come!";
const char* password = "blessings1";

// WebSocket server address
const char* websocketServer = "ws://64.225.55.176:8765";

WebsocketsClient webSocket;

float alpha = 0.1;
bool initializedFilter = false;

double filteredX, filteredY, filteredZ;
double filteredPitch, filteredYaw, filteredRoll;

double posThreshold = 100.0;     // position outlier threshold
double orientThreshold = 30.0;   // orientation outlier threshold (degrees)

int maxConsecutiveOutliers = 3;
int outliersX = 0, outliersY = 0, outliersZ = 0;
int outliersPitch = 0, outliersYaw = 0, outliersRoll = 0;

bool useConstantX = false;
bool useConstantY = false;
bool useConstantZ = false;
bool useConstantPitch = false;
bool useConstantYaw = false;
bool useConstantRoll = false;

double constantX = 100.0;
double constantY = 200.0;
double constantZ = 300.0;
double constantPitch = 10.0;
double constantYaw = 20.0;
double constantRoll = 30.0;

unsigned long lastReconnectAttempt = 0;
bool websocketConnected = false;

double updateEMAWithOutliers(double raw, double &filtered, double threshold, int &outlierCount) {
    double diff = fabs(raw - filtered);

    if (diff > threshold) {
        // Outlier detected
        outlierCount++;
        if (outlierCount >= maxConsecutiveOutliers) {
            // Accept this new reading as a real shift
            filtered = raw;
            outlierCount = 0;
        } else {
            // Ignore this reading
            return filtered;
        }
    } else {
        // Not an outlier
        outlierCount = 0;
        filtered = alpha * raw + (1 - alpha) * filtered;
    }
    return filtered;
}

void onWebSocketEvent(WebsocketsEvent event, String data) {
    if (event == WebsocketsEvent::ConnectionOpened) {
        Serial.println("WebSocket Connection Opened");
        webSocket.send("{\"type\": \"robot\"}");
        websocketConnected = true;
    } else if (event == WebsocketsEvent::ConnectionClosed) {
        Serial.println("WebSocket Connection Closed");
        websocketConnected = false;
    } else if (event == WebsocketsEvent::GotPing) {
        Serial.println("Received ping from server");
        webSocket.send("pong");
    } else if (event == WebsocketsEvent::GotPong) {
        Serial.println("Received pong from server");
    }
}

void reconnectWebSocket() {
    if (WiFi.status() == WL_CONNECTED && !websocketConnected) {
        Serial.println("Attempting to reconnect to WebSocket...");
        bool connected = webSocket.connect(websocketServer);
        if (connected) {
            Serial.println("Reconnected to WebSocket server");
            websocketConnected = true;
        } else {
            Serial.println("Failed to reconnect, will try again...");
        }
    }
}

void setup() {
    Serial.begin(115200);
    delay(1000);

    Serial2.begin(115200, SERIAL_8N1, 16, 17);

    // Connect to Wi-Fi
    Serial.println("Connecting to Wi-Fi...");
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, password);

    unsigned long wifiConnectStart = millis();
    while (WiFi.status() != WL_CONNECTED) {
        if (millis() - wifiConnectStart > 2000) {
            Serial.println("\nFailed to connect to Wi-Fi, restarting...");
            ESP.restart();
        }
        delay(100);
        Serial.print(".");
    }
    Serial.println("\nConnected to Wi-Fi");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());

    webSocket.onEvent(onWebSocketEvent);

    webSocket.onMessage([](WebsocketsMessage message) {
        if (message.isText()) {
            String data = message.data();
            StaticJsonDocument<512> doc;
            DeserializationError error = deserializeJson(doc, data);

            if (!error) {
                double x = doc["position"]["x"].as<double>();
                double y = doc["position"]["y"].as<double>();
                double z = doc["position"]["z"].as<double>();
                double pitch = doc["orientation"]["pitch"].as<double>();
                double yaw   = doc["orientation"]["yaw"].as<double>();
                double roll  = doc["orientation"]["roll"].as<double>();

                if (!initializedFilter) {
                    filteredX = x;
                    filteredY = y;
                    filteredZ = z;
                    filteredPitch = pitch;
                    filteredYaw = yaw;
                    filteredRoll = roll;
                    initializedFilter = true;
                } else {
                    filteredX = updateEMAWithOutliers(x, filteredX, posThreshold, outliersX);
                    filteredY = updateEMAWithOutliers(y, filteredY, posThreshold, outliersY);
                    filteredZ = updateEMAWithOutliers(z, filteredZ, posThreshold, outliersZ);
                    filteredPitch = updateEMAWithOutliers(pitch, filteredPitch, orientThreshold, outliersPitch);
                    filteredYaw = updateEMAWithOutliers(yaw, filteredYaw, orientThreshold, outliersYaw);
                    filteredRoll = updateEMAWithOutliers(roll, filteredRoll, orientThreshold, outliersRoll);
                }

                // Apply hardcoded overrides if enabled
                if (useConstantX) filteredX = constantX;
                if (useConstantY) filteredY = constantY;
                if (useConstantZ) filteredZ = constantZ;
                if (useConstantPitch) filteredPitch = constantPitch;
                if (useConstantYaw) filteredYaw = constantYaw;
                if (useConstantRoll) filteredRoll = constantRoll;

                // Print to Serial
                Serial.printf("%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",
                              filteredX, filteredY, filteredZ,
                              filteredPitch, filteredYaw, filteredRoll);

                // Send over UART (Serial2) to another ESP32
                Serial2.printf("%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",
                               filteredX, filteredY, filteredZ,
                               filteredPitch, filteredYaw, filteredRoll);
            } else {
                Serial.print("deserializeJson() failed: ");
                Serial.println(error.c_str());
            }
        }
    });

    // Initial WebSocket connection attempt
    bool connected = webSocket.connect(websocketServer);
    if (connected) {
        Serial.println("Connected to WebSocket server");
        websocketConnected = true;
    } else {
        Serial.println("Failed initial WebSocket connection, will attempt to reconnect in loop...");
        websocketConnected = false;
    }

    lastReconnectAttempt = millis();
}

void loop() {
    webSocket.poll();

    // Check if we lost connection, try to reconnect if needed
    if (!websocketConnected && (millis() - lastReconnectAttempt > 1000)) {
        lastReconnectAttempt = millis();
        reconnectWebSocket();
    }

    // Keep the loop responsive
    delay(10);
}
