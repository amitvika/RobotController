#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <ArduinoWebsockets.h>
#include <ArduinoJson.h>
#include <Arduino.h>
#include <WiFi.h>
#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <ArduinoWebsockets.h>
#include <ArduinoJson.h>
#include <Arduino.h>
#include <WiFi.h>
#include <esp_now.h>
#include <string.h>

// -------------------- Pin Configuration --------------------
const int POWER_PIN     = 25; // This pin is set HIGH by default
const int MOTOR_FWD_PIN = 21;
const int MOTOR_BWD_PIN = 22;

// -------------------- Direction Control Variable --------------------
bool reverseMotor = true; // If wiring requires reversing up/down logic

// -------------------- Speed Control --------------------
const int MAX_PWM    = 255;
const int ACTIVE_PWM = 200; // ~170â€“200

// -------------------- Command Flags --------------------
bool upCmd   = false;
bool downCmd = false;

// ------------------------------------------------------------------
// parseKeyValueLine: "markerId=hands;up=1;down=0;..."
//
// We'll ignore everything except "up=..." and "down=..." for controlling
// the motor. If you want to parse more fields, you can extend this function.
// ------------------------------------------------------------------
void parseKeyValueLine(char* line) {
    // Split by semicolons
    char* token = strtok(line, ";");
    while (token != NULL) {
        // Look for '='
        char* eqPos = strchr(token, '=');
        if (eqPos) {
            *eqPos = '\0';     // Split
            char* key = token;
            char* val = eqPos + 1;

            // Compare keys
            if (!strcmp(key, "up")) {
                upCmd   = (atoi(val) == 1);
            } else if (!strcmp(key, "down")) {
                downCmd = (atoi(val) == 1);
            }
        }
        token = strtok(NULL, ";");
    }

    // Debug (optional)
    Serial.print("Commands => up=");
    Serial.print(upCmd);
    Serial.print(", down=");
    Serial.println(downCmd);
}

// ------------------------------------------------------------------
// ESPNOW receive callback
// ------------------------------------------------------------------
void onDataRecv(const uint8_t *mac_addr, const uint8_t *incomingData, int len) {
    if (len <= 0) return;

    // Copy to a buffer for parsing
    char buffer[256];
    int copyLen = (len < 255) ? len : 255;
    memcpy(buffer, incomingData, copyLen);
    buffer[copyLen] = '\0';

    // We'll parse the entire buffer as one line
    parseKeyValueLine(buffer);
}

// ------------------------------------------------------------------
// Motor direction + speed
// ------------------------------------------------------------------
void setMotorDirectionAndSpeed(bool up, bool down, bool reverse) {
    int forwardVal  = 0;
    int backwardVal = 0;

    // Decide direction
    bool motorForward  = up;
    bool motorBackward = down;
    if (reverse) {
        motorForward  = down;
        motorBackward = up;
    }

    if (motorForward && !motorBackward) {
        forwardVal  = ACTIVE_PWM;
        backwardVal = 0;
    } 
    else if (motorBackward && !motorForward) {
        forwardVal  = 0;
        backwardVal = ACTIVE_PWM;
    } 
    else {
        // Stop
        forwardVal  = 0;
        backwardVal = 0;
    }

    ledcWrite(0, forwardVal);
    ledcWrite(1, backwardVal);
}

// ------------------------------------------------------------------
// Setup pins and PWM
// ------------------------------------------------------------------
void setupPinsAndPWMs() {
  // Power pin
  pinMode(POWER_PIN, OUTPUT);
  digitalWrite(POWER_PIN, HIGH);

  // PWM pins
  pinMode(MOTOR_FWD_PIN, OUTPUT);
  pinMode(MOTOR_BWD_PIN, OUTPUT);

  // Setup LEDC channels for forward/back
  ledcSetup(0, 5000, 8); // forward channel
  ledcSetup(1, 5000, 8); // backward channel

  ledcAttachPin(MOTOR_FWD_PIN, 0);
  ledcAttachPin(MOTOR_BWD_PIN, 1);

  // Initially stop
  ledcWrite(0, 0);
  ledcWrite(1, 0);
}

void setup() {
  Serial.begin(115200);

  setupPinsAndPWMs();

  // Wi-Fi not used for normal connection here, but needed for ESP-NOW
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();

  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
  }

  esp_now_register_recv_cb(onDataRecv);

  Serial.print("Slave MAC Address: ");
  Serial.println(WiFi.macAddress());
  Serial.println("ESP-NOW Slave ready...");
}

void loop() {
  // Just respond to commands in real-time, no ramping logic here
  setMotorDirectionAndSpeed(upCmd, downCmd, reverseMotor);

  // Minimal loop delay
  delay(1);
}
