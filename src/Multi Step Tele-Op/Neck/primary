#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <ArduinoWebsockets.h>
#include <ArduinoJson.h>
#include <esp_now.h>
#include <string.h>
#include <Wire.h>
#include <Adafruit_BusIO_Register.h>
#include <Adafruit_Sensor.h>

// -------------------- Pin Configuration --------------------
const int POWER_PIN     = 12; // This pin is set HIGH by default
const int MOTOR_FWD_PIN = 13;
const int MOTOR_BWD_PIN = 14;

// -------------------- Direction Control Variable --------------------
bool reverseMotor = true; // If wiring requires reversing up/down logic

// -------------------- Speed Control --------------------
const int ACTIVE_PWM = 255; // PWM range maximum

// -------------------- Command Values --------------------
int upCmd   = 0; // Now holds a value between 0 and 100
int downCmd = 0;

// ------------------------------------------------------------------
// parseKeyValueLine: 
// e.g. "mac=asd;h1X=0;...;u=50;d=0;"
// Only "u" and "d" are parsed for motor control.
// ------------------------------------------------------------------
void parseKeyValueLine(char* line) {
    // Split by semicolons
    char* token = strtok(line, ";");
    while (token != NULL) {
        // Look for '=' in the current token
        char* eqPos = strchr(token, '=');
        if (eqPos) {
            *eqPos = '\0';  // Terminate key string at '='
            char* key = token;
            char* val = eqPos + 1;

            if (!strcmp(key, "u")) {
                upCmd = atoi(val);   // Expect a value between 0 and 100
            } 
            else if (!strcmp(key, "d")) {
                downCmd = atoi(val); // Expect a value between 0 and 100
            }
        }
        token = strtok(NULL, ";");
    }

    // Optional debugging output
    Serial.print("Commands => up=");
    Serial.print(upCmd);
    Serial.print(", down=");
    Serial.println(downCmd);
}

// ------------------------------------------------------------------
// ESPNOW receive callback
// ------------------------------------------------------------------
void onDataRecv(const uint8_t *mac_addr, const uint8_t *incomingData, int len) {
    if (len <= 0) return;

    // Copy to a buffer for parsing
    char buffer[256];
    int copyLen = (len < 255) ? len : 255;
    memcpy(buffer, incomingData, copyLen);
    buffer[copyLen] = '\0';

    // Parse the entire buffer as one line
    parseKeyValueLine(buffer);
}

// ------------------------------------------------------------------
// Motor direction + proportional speed control
// ------------------------------------------------------------------
void setMotorDirectionAndSpeed(int up, int down, bool reverse) {
    int forwardVal  = 0;
    int backwardVal = 0;

    // Adjust for reverse wiring if needed by swapping the command values
    int upValue = up;
    int downValue = down;
    if (reverse) {
        int temp = upValue;
        upValue = downValue;
        downValue = temp;
    }

    // Determine motor speed based on commands:
    // - If only one direction is active, map the command (0-100) to PWM (0-255)
    // - If both commands are active or both are zero, stop the motor.
    if (upValue > 0 && downValue == 0) {
        forwardVal = map(upValue, 0, 100, 0, ACTIVE_PWM);
        backwardVal = 0;
    } 
    else if (downValue > 0 && upValue == 0) {
        forwardVal = 0;
        backwardVal = map(downValue, 0, 100, 0, ACTIVE_PWM);
    } 
    else {
        // When both directions are commanded or neither, stop the motor.
        forwardVal  = 0;
        backwardVal = 0;
    }

    // Write the PWM values to the motor channels
    ledcWrite(0, forwardVal);
    ledcWrite(1, backwardVal);
}

// ------------------------------------------------------------------
// Setup pins and PWM channels
// ------------------------------------------------------------------
void setupPinsAndPWMs() {
  pinMode(POWER_PIN, OUTPUT);
  digitalWrite(POWER_PIN, HIGH);

  pinMode(MOTOR_FWD_PIN, OUTPUT);
  pinMode(MOTOR_BWD_PIN, OUTPUT);

  // Setup PWM channels (LEDC)
  ledcSetup(0, 5000, 8); // Channel 0 for forward direction
  ledcSetup(1, 5000, 8); // Channel 1 for backward direction

  ledcAttachPin(MOTOR_FWD_PIN, 0);
  ledcAttachPin(MOTOR_BWD_PIN, 1);

  // Initially stop the motor
  ledcWrite(0, 0);
  ledcWrite(1, 0);
}

void setup() {
  Serial.begin(115200);
  setupPinsAndPWMs();

  // Wi-Fi mode set for ESP-NOW (no normal Wi-Fi connection)
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();

  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
  }
  esp_now_register_recv_cb(onDataRecv);

  Serial.print("Slave MAC Address: ");
  Serial.println(WiFi.macAddress());
  Serial.println("ESP-NOW Slave ready...");
}

void loop() {
  // Apply motor commands based on the current upCmd and downCmd values
  setMotorDirectionAndSpeed(upCmd, downCmd, reverseMotor);
  delay(1);
}
