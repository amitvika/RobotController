#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <esp_now.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <Adafruit_BusIO_Register.h>
#include <Adafruit_Sensor.h>
#include <HTTPClient.h>
#include <math.h> // for roundf()
#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <esp_now.h>
#include <math.h> // for sin(), M_PI, etc.
#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <esp_now.h>
#include <Wire.h>
#include <Adafruit_BusIO_Register.h>
#include <Adafruit_Sensor.h>
#include <math.h>  // for sin(), M_PI, round(), etc.
#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <esp_now.h>
#include <Wire.h>
#include <Adafruit_BusIO_Register.h>
#include <Adafruit_Sensor.h>
#include <HTTPClient.h>
#include <math.h> // for roundf()
#include <Arduino.h>
#include <WiFi.h>
#include <esp_now.h>
#include <Wire.h>

// ------------------------- PIN DEFINITIONS -------------------------
#define SDA_PIN_SENSOR   21
#define SCL_PIN_SENSOR   22
#define MOTOR_CTRL_PIN1  14
#define MOTOR_CTRL_PIN2  13
#define MOTOR_ENABLE_PIN 12

#define AS5600_ADDRESS   0x36

// ---------------------- CONTROL PARAMETERS -------------------------
uint16_t desiredPosition = 2000;  
float kp = 0.5;
int maxPWM = 255;
int positionErrorAllowance = 1;
int deadZone = 16;

// Which actuator index to use from the incoming array
uint8_t actuatorIndex = 0;

// ------------------- STRUCT FOR ESPNOW DATA ------------------------
typedef struct {
  uint16_t actuatorPositions[6];
} ActuatorData;

ActuatorData receivedData; 

// --------------------- READ AS5600 ANGLE ---------------------------
uint16_t readAS5600Angle() {
  Wire.beginTransmission(AS5600_ADDRESS);
  Wire.write(0x0C);
  Wire.endTransmission(false);

  Wire.requestFrom(AS5600_ADDRESS, (uint8_t)2);
  if (Wire.available() == 2) {
    uint8_t highByte = Wire.read();
    uint8_t lowByte  = Wire.read();
    uint16_t angle   = ((uint16_t)highByte << 8) | lowByte;
    return (angle & 0x0FFF);
  }
  return 0;  // Return 0 if reading fails
}

// ------------------ MOTOR CONTROL FUNCTIONS ------------------------
int computeTargetPWM(uint16_t currentPosition, uint16_t desiredPosition) {
  int error = desiredPosition - currentPosition;

  // If within allowance, stop
  if (abs(error) <= positionErrorAllowance) {
    return 0;
  }

  // Simple proportional control
  int pwmValue = kp * error;
  pwmValue = constrain(pwmValue, -maxPWM, maxPWM);

  // Respect dead zone
  if (pwmValue > 0) {
    pwmValue = max(pwmValue, deadZone);
  } else if (pwmValue < 0) {
    pwmValue = min(pwmValue, -deadZone);
  }

  return pwmValue;
}

void applyPWM(int pwmValue, uint8_t forwardPin, uint8_t reversePin) {
  if (pwmValue > 0) {
    ledcWrite(0, pwmValue);
    ledcWrite(1, 0);
  } else if (pwmValue < 0) {
    ledcWrite(0, 0);
    ledcWrite(1, -pwmValue);
  } else {
    ledcWrite(0, 0);
    ledcWrite(1, 0);
  }
}

// ----------------------- ESPNOW CALLBACK ---------------------------
void onDataRecv(const uint8_t *mac_addr, const uint8_t *incomingData, int len) {
  if (len == sizeof(ActuatorData)) {
    memcpy(&receivedData, incomingData, sizeof(ActuatorData));
    // Select the desired position based on actuatorIndex
    desiredPosition = receivedData.actuatorPositions[actuatorIndex];
  }
}

// ------------------------------ SETUP ------------------------------
void setup() {
  Serial.begin(115200);

  // Enable motor driver
  pinMode(MOTOR_ENABLE_PIN, OUTPUT);
  digitalWrite(MOTOR_ENABLE_PIN, HIGH);

  // Setup PWM channels
  ledcSetup(0, 20000, 8);
  ledcSetup(1, 20000, 8);
  ledcAttachPin(MOTOR_CTRL_PIN1, 0);
  ledcAttachPin(MOTOR_CTRL_PIN2, 1);

  // Start I2C for AS5600
  Wire.begin(SDA_PIN_SENSOR, SCL_PIN_SENSOR);

  // Initialize Wi-Fi & ESP-NOW
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  esp_now_register_recv_cb(onDataRecv);

  Serial.print("Slave MAC: ");
  Serial.println(WiFi.macAddress());
}

// ------------------------------ LOOP -------------------------------
void loop() {
  uint16_t angle = readAS5600Angle();
  int targetPWM  = computeTargetPWM(angle, desiredPosition);
  applyPWM(targetPWM, MOTOR_CTRL_PIN1, MOTOR_CTRL_PIN2);

  // Minimal debug (optional)
  // Serial.print("Angle: "); Serial.print(angle);
  // Serial.print(" Desired: "); Serial.print(desiredPosition);
  // Serial.print(" PWM: "); Serial.println(targetPWM);

 
}
