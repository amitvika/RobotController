#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <ArduinoWebsockets.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <Adafruit_BusIO_Register.h>
#include <Adafruit_Sensor.h>
#include <esp_now.h>
#include <WiFiClientSecure.h>
#include <HTTPClient.h>

// I2C Pins (Hardware I2C on ESP32)
#define SDA_PIN_SENSOR 21
#define SCL_PIN_SENSOR 22

// Motor Control Pins
#define MOTOR_CTRL_PIN1 13
#define MOTOR_CTRL_PIN2 14
#define MOTOR_ENABLE_PIN 12  // Must be driven HIGH to enable the motor

#define AS5600_ADDRESS 0x36

// Control parameters
uint16_t desiredPosition = 2000;  
float kp = 5;
int maxPWM = 255;
int positionErrorAllowance = 2;
int deadZone = 25;

// For validation of sensor readings
uint16_t lastValidAngle = 2000; 
const uint16_t maxAllowedJump = 5000; 

// Structure to match what is sent by the master (6 actuator positions)
typedef struct {
    uint16_t actuatorPositions[6];
} ActuatorData;

ActuatorData receivedData; 
uint8_t actuatorIndex = 1; 

// Function to read raw angle from AS5600 sensor
uint16_t readAS5600Angle(TwoWire &wireBus, uint16_t &lastValidAngle) {
    uint16_t angle = 0;

    wireBus.beginTransmission(AS5600_ADDRESS);
    wireBus.write(0x0C);
    if (wireBus.endTransmission(false) != 0) {
        return lastValidAngle;
    }

    wireBus.requestFrom(AS5600_ADDRESS, (uint8_t)2);
    if (wireBus.available() == 2) {
        uint8_t highByte = wireBus.read();
        uint8_t lowByte  = wireBus.read();
        angle = ((uint16_t)highByte << 8) | lowByte;
        angle = angle & 0x0FFF;

        if (abs((int)angle - (int)lastValidAngle) > maxAllowedJump) {
            return lastValidAngle;
        }

        lastValidAngle = angle;
    } else {
        return lastValidAngle;
    }

    return angle;
}

int computeTargetPWM(uint16_t currentPosition, uint16_t desiredPosition) {
    int error = desiredPosition - currentPosition;

    if (abs(error) <= positionErrorAllowance) {
        return 0;
    }

    int pwmValue = kp * error;
    pwmValue = constrain(pwmValue, -maxPWM, maxPWM);

    if (pwmValue > 0) {
        pwmValue = max(pwmValue, deadZone);
    } else if (pwmValue < 0) {
        pwmValue = min(pwmValue, -deadZone);
    }

    return pwmValue;
}

void applyPWM(int pwmValue, uint8_t forwardPin, uint8_t reversePin) {
    if (pwmValue > 0) {
        ledcWrite(0, pwmValue);
        ledcWrite(1, 0);
    } else if (pwmValue < 0) {
        ledcWrite(0, 0);
        ledcWrite(1, -pwmValue);
    } else {
        ledcWrite(0, 0);
        ledcWrite(1, 0);
    }
}

void onDataRecv(const uint8_t *mac_addr, const uint8_t *incomingData, int len) {
    if (len == sizeof(ActuatorData)) {
        memcpy(&receivedData, incomingData, sizeof(ActuatorData));
        desiredPosition = receivedData.actuatorPositions[actuatorIndex];
    }
}

void setup() {
    Serial.begin(115200);
    delay(1000);

    pinMode(32, INPUT_PULLUP);
    pinMode(16, INPUT_PULLUP);
    pinMode(21, INPUT_PULLUP);
    pinMode(4, INPUT_PULLDOWN);

    pinMode(MOTOR_ENABLE_PIN, OUTPUT);
    digitalWrite(MOTOR_ENABLE_PIN, HIGH);

    ledcSetup(0, 20000, 8);
    ledcSetup(1, 20000, 8);
    ledcAttachPin(MOTOR_CTRL_PIN1, 0);
    ledcAttachPin(MOTOR_CTRL_PIN2, 1);

    Wire.begin(SDA_PIN_SENSOR, SCL_PIN_SENSOR);

    WiFi.mode(WIFI_STA);
    WiFi.disconnect();
    if (esp_now_init() != ESP_OK) return;
    esp_now_register_recv_cb(onDataRecv);

    Serial.print("Slave MAC Address: ");
    Serial.println(WiFi.macAddress());
}

void loop() {
    uint16_t angle = readAS5600Angle(Wire, lastValidAngle);
    int targetPWM = computeTargetPWM(angle, desiredPosition);
    applyPWM(targetPWM, MOTOR_CTRL_PIN1, MOTOR_CTRL_PIN2);

    int error = desiredPosition - angle;
    Serial.print("Angle: ");
    Serial.print(angle);
    Serial.print(" Error: ");
    Serial.print(error);
    Serial.print(" TargetPWM: ");
    Serial.println(targetPWM);

    delay(10);  
}