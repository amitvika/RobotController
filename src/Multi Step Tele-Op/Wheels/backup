#include <Arduino.h>
#include <WiFi.h>
#include <ArduinoWebsockets.h>
#include <ArduinoJson.h>
#include <Arduino.h>
#include <WiFi.h>
#include <esp_now.h>
#include <Arduino.h>
#include <WiFi.h>
#include <ArduinoWebsockets.h>
#include <ArduinoJson.h>
#include <Arduino.h>
#include <WiFi.h>
#include <esp_now.h>
#include <Arduino.h>
#include <WiFi.h>
#include <esp_now.h>
#include <string.h>
#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <esp_now.h>
#include <string.h>

// -------------------- Pin Configuration --------------------
const int HIGH_PINS[] = {4, 32, 21, 19};
const int LOW_PINS[]  = {16, 26};
const int PWM_PINS_1[] = {25, 27}; // Motor 1 forward/backward
const int PWM_PINS_2[] = {21, 22}; // Motor 2 forward/backward
const int FLOATING_PIN = 34;

const int NUM_HIGH_PINS = sizeof(HIGH_PINS) / sizeof(HIGH_PINS[0]);
const int NUM_LOW_PINS  = sizeof(LOW_PINS) / sizeof(LOW_PINS[0]);

// -------------------- Direction Control Variables --------------------
bool reverseMotor1 = true;
bool reverseMotor2 = false;
bool swapLeftRight = true; // true by default

// -------------------- Speed and Ramping --------------------
const int MOTOR_SPEED  = 200; // max speed (0-255)
const int MIN_PWM      = 100; // deadzone minimum PWM for movement
static float currentSpeed = 0.0f;
unsigned long lastUpdateTime = 0; 

// Ramping rates
// 5s ramp-up => MOTOR_SPEED / 5000 ms
// 1s ramp-down => MOTOR_SPEED / 1000 ms
const float rampUpRate   = (float)MOTOR_SPEED / 5000.0f; 
const float rampDownRate = (float)MOTOR_SPEED / 1000.0f; 

// -------------------- Command Flags --------------------
bool forwardCmd  = false;
bool backwardCmd = false;
bool leftCmd     = false;
bool rightCmd    = false;

// -------------------- Previous Directions --------------------
bool old_m1F = false, old_m1B = false, old_m2F = false, old_m2B = false;

// Flag indicates if we must ramp down to speed=0 before reversing
bool needsRampDown = true;
// Store new directions after ramp down
bool new_m1F=false, new_m1B=false, new_m2F=false, new_m2B=false;

// ------------------------------------------------------------------
// Parse the minimal "f=0;b=0;l=0;r=0" from the incoming text
// e.g. "mac=xxx;h1X=0;...;f=1;b=0;l=0;r=1;u=0;d=0"
// We'll find "f=", "b=", "l=", "r=" and set booleans
// ------------------------------------------------------------------
void parseNavigationLine(const char* text) {
    // Reset commands
    forwardCmd  = false;
    backwardCmd = false;
    leftCmd     = false;
    rightCmd    = false;

    // We'll search for the substrings: "f=", "b=", "l=", "r="
    // then parse the digit after '='
    auto findBool = [&](const char* key, bool &cmd){
      char* pos = strstr((char*)text, key);
      if(pos){
        pos += strlen(key); // move after "f=" or "b=" or "l=" or "r="
        int val = atoi(pos);
        cmd = (val != 0);
      }
    };

    findBool("f=", forwardCmd);
    findBool("b=", backwardCmd);
    findBool("l=", leftCmd);
    findBool("r=", rightCmd);

    // If you also want up/down => findBool("u=", upCmd) etc.

    // If we want to swap left/right:
    if(swapLeftRight){
      bool tmp = leftCmd;
      leftCmd = rightCmd;
      rightCmd = tmp;
    }

    // Debug (optional)
    // Uncomment if you want to see the commands
    /*
    Serial.print("Forward: ");  Serial.println(forwardCmd ? "ON":"OFF");
    Serial.print("Backward: "); Serial.println(backwardCmd? "ON":"OFF");
    Serial.print("Left: ");     Serial.println(leftCmd    ? "ON":"OFF");
    Serial.print("Right: ");    Serial.println(rightCmd   ? "ON":"OFF");
    */
}

// ------------------------------------------------------------------
// ESP-NOW Callback
// ------------------------------------------------------------------
void onDataRecv(const uint8_t *mac_addr, const uint8_t *incomingData, int len) {
    if (len <= 0) return;

    // Copy to a local null-terminated buffer
    char buffer[256];
    int copyLen = (len < 255)? len : 255;
    memcpy(buffer, incomingData, copyLen);
    buffer[copyLen] = '\0';

    // Now parse the minimal nav data from "f=...,b=...,l=...,r=..."
    parseNavigationLine(buffer);
}

// ------------------------------------------------------------------
// Motor Speed Setting
// ------------------------------------------------------------------
void setMotorSpeed(int channelF, int channelB, bool reverse, bool forward, bool backward, int speedValue) {
    int f = 0, b = 0;

    if (forward && !backward) {
        f = speedValue;
        b = 0;
    } else if (backward && !forward) {
        f = 0;
        b = speedValue;
    } else {
        f = 0;
        b = 0;
    }

    if (reverse) {
        int temp = f;
        f = b;
        b = temp;
    }

    ledcWrite(channelF, f);
    ledcWrite(channelB, b);
}

// ------------------------------------------------------------------
// getDesiredDirections: from forwardCmd/backwardCmd/leftCmd/rightCmd
// decide motor directions
// ------------------------------------------------------------------
void getDesiredDirections(bool &m1F, bool &m1B, bool &m2F, bool &m2B) {
    bool f = forwardCmd;
    bool b = backwardCmd;
    bool l = leftCmd;
    bool r = rightCmd;

    if (f && !b && !l && !r) {
        // forward
        m1F=true;  m1B=false;
        m2F=true;  m2B=false;
    } else if (b && !f && !l && !r) {
        // backward
        m1F=false; m1B=true;
        m2F=false; m2B=true;
    } else if (l && !r && !f && !b) {
        // left
        m1F=true;  m1B=false;
        m2F=false; m2B=true;
    } else if (r && !l && !f && !b) {
        // right
        m1F=false; m1B=true;
        m2F=true;  m2B=false;
    } else {
        // conflicting or no commands => stop
        m1F=false; m1B=false;
        m2F=false; m2B=false;
    }
}

// Check if reversing is needed
bool requiresReversal(bool om1F, bool om1B, bool om2F, bool om2B, 
                      bool nm1F, bool nm1B, bool nm2F, bool nm2B) {
    bool m1Rev = (om1F && nm1B) || (om1B && nm1F);
    bool m2Rev = (om2F && nm2B) || (om2B && nm2F);
    return (m1Rev || m2Rev);
}

// ------------------------------------------------------------------
// controlMotors: ramp speed up/down + apply directions
// ------------------------------------------------------------------
void controlMotors() {
    unsigned long now = millis();
    unsigned long delta = now - lastUpdateTime;
    lastUpdateTime = now;

    bool anyCmd = (forwardCmd || backwardCmd || leftCmd || rightCmd);

    bool m1F, m1B, m2F, m2B;
    getDesiredDirections(m1F, m1B, m2F, m2B);

    if(!anyCmd){
        // stop
        currentSpeed=0;
        needsRampDown=false;
        setMotorSpeed(0, 1, reverseMotor1, false,false,0);
        setMotorSpeed(2, 3, reverseMotor2, false,false,0);
        old_m1F=m1F; old_m1B=m1B; old_m2F=m2F; old_m2B=m2B;
        return;
    }

    // check reversing
    if(!needsRampDown){
        if(requiresReversal(old_m1F,old_m1B,old_m2F,old_m2B,
                            m1F,m1B,m2F,m2B) && currentSpeed>0){
            needsRampDown=true;
            new_m1F=m1F; new_m1B=m1B;
            new_m2F=m2F; new_m2B=m2B;
            m1F=old_m1F; m1B=old_m1B;
            m2F=old_m2F; m2B=old_m2B;
        }
    }

    if(needsRampDown){
        if(currentSpeed>0){
            currentSpeed-= (rampDownRate* delta);
            if(currentSpeed<0) currentSpeed=0;
        }
        if(currentSpeed==0){
            needsRampDown=false;
            m1F=new_m1F; m1B=new_m1B;
            m2F=new_m2F; m2B=new_m2B;
        }
    }else{
        // ramp up
        if(currentSpeed< MOTOR_SPEED){
            currentSpeed+= (rampUpRate* delta);
            if(currentSpeed> MOTOR_SPEED) currentSpeed=MOTOR_SPEED;
        }
    }

    // apply deadzone
    int speedVal=0;
    if(currentSpeed>0){
        speedVal=(int)currentSpeed;
        if(speedVal< MIN_PWM) speedVal= MIN_PWM;
    }

    // set motors
    setMotorSpeed(0,1, reverseMotor1, m1F,m1B, speedVal);
    setMotorSpeed(2,3, reverseMotor2, m2F,m2B, speedVal);

    old_m1F=m1F; old_m1B=m1B;
    old_m2F=m2F; old_m2B=m2B;
}

// ------------------------------------------------------------------
// Setup Pins/PWM & ESPNOW
// ------------------------------------------------------------------
void setupPinsAndPWMs(){
  // Setup motor pins for PWM
  for (int i = 0; i < 2; i++) {
    pinMode(PWM_PINS_1[i], OUTPUT);
    pinMode(PWM_PINS_2[i], OUTPUT);
  }

  // LEDC channels
  ledcSetup(0, 5000, 8); // M1F
  ledcSetup(1, 5000, 8); // M1B
  ledcSetup(2, 5000, 8); // M2F
  ledcSetup(3, 5000, 8); // M2B

  ledcAttachPin(PWM_PINS_1[0], 0);
  ledcAttachPin(PWM_PINS_1[1], 1);
  ledcAttachPin(PWM_PINS_2[0], 2);
  ledcAttachPin(PWM_PINS_2[1], 3);
}

void setup(){
  Serial.begin(115200);

  setupPinsAndPWMs();

  // If you have any pins you want forced HIGH or LOW, do so here
  // e.g. pinMode( somePin, OUTPUT); digitalWrite(somePin, HIGH);

  // Initialize Wi-Fi & ESPNOW
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  if(esp_now_init()!= ESP_OK){
    Serial.println("Error init ESP-NOW");
    return;
  }
  esp_now_register_recv_cb(onDataRecv);

  Serial.println("Slave ready for minimal nav string => forward/back/left/right");
  lastUpdateTime= millis();
}

void loop(){
  controlMotors();
  delay(1); // minimal
}
