#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <ArduinoWebsockets.h>
#include <ArduinoJson.h>
#include <Arduino.h>
#include <WiFi.h>
#include <esp_wifi.h>
#include <esp_now.h>
#include <string.h>

// -------------------- Pin Configuration --------------------
const int HIGH_PINS[]    = {4, 32, 21, 19};
const int LOW_PINS[]     = {16, 26};
const int PWM_PINS_1[2]  = {25, 27}; // Motor 1 forward/backward
const int PWM_PINS_2[2]  = {21, 22}; // Motor 2 forward/backward

// If you want them as #defines or static, you can do so. This is just fine.

// -------------------- Motor Control Variables --------------------
bool reverseMotor1   = true;
bool reverseMotor2   = false;
bool swapLeftRight   = true; // swap the left & right commands if desired

// Speeds
static const int MOTOR_SPEED = 200;   // max speed
static const int MIN_PWM     = 100;   // deadzone
float currentSpeed           = 0.0f;  // current motor speed
unsigned long lastUpdateTime = 0;

// Ramping
static const float rampUpRate   = (float)MOTOR_SPEED / 5000.0f;  // 5s to reach full speed
static const float rampDownRate = (float)MOTOR_SPEED / 1000.0f;  // 1s to go from full speed to zero

// Navigation flags
bool forwardCmd  = false;
bool backwardCmd = false;
bool leftCmd     = false;
bool rightCmd    = false;

// Old directions
bool old_m1F=false, old_m1B=false, old_m2F=false, old_m2B=false;

// Must ramp to 0 before reversing
bool needsRampDown = true;
bool new_m1F=false, new_m1B=false, new_m2F=false, new_m2B=false;

// ------------------------------------------------------------------
// Utility: parse `f=` `b=` `l=` `r=` booleans from incoming text
// Example: "f=1;b=0;l=0;r=1;u=0;d=0"
// ------------------------------------------------------------------
void parseNavigationLine(const char* txt) {
  // Reset
  forwardCmd  = false;
  backwardCmd = false;
  leftCmd     = false;
  rightCmd    = false;

  // We'll define a small lambda to find the integer after "key="
  auto findBool = [&](const char* key, bool &cmd){
    char* p= strstr((char*)txt, key);
    if(p){
      p += strlen(key); // skip "f=" 
      int val= atoi(p);
      cmd= (val!=0);
    }
  };

  findBool("f=", forwardCmd);
  findBool("b=", backwardCmd);
  findBool("l=", leftCmd);
  findBool("r=", rightCmd);

  // If swap left/right is needed:
  if(swapLeftRight){
    bool temp= leftCmd;
    leftCmd= rightCmd;
    rightCmd= temp;
  }

  // Debug print
  Serial.print("CMD => f=");
  Serial.print((int)forwardCmd);
  Serial.print(" b=");
  Serial.print((int)backwardCmd);
  Serial.print(" l=");
  Serial.print((int)leftCmd);
  Serial.print(" r=");
  Serial.println((int)rightCmd);
}

// ------------------------------------------------------------------
// ESP-NOW callback
// ------------------------------------------------------------------
void onDataRecv(const uint8_t *mac_addr, const uint8_t *incomingData, int len) {
  if(len<=0) return;
  char buffer[256];
  int cpy= (len<255) ? len : 255;
  memcpy(buffer, incomingData, cpy);
  buffer[cpy]='\0'; 
  parseNavigationLine(buffer);
}

// ------------------------------------------------------------------
// Set motor speed (channelF, channelB) with direction reversal
// ------------------------------------------------------------------
void setMotorSpeed(int channelF, int channelB, bool reverse, bool forward, bool backward, int speedVal){
  int f=0, b=0;
  if(forward && !backward){
    f= speedVal; b=0;
  } else if(backward && !forward){
    f=0; b= speedVal;
  }
  // else => stop => f=b=0

  if(reverse){
    int tmp=f; f=b; b=tmp;
  }

  ledcWrite(channelF, f);
  ledcWrite(channelB, b);
}

// Decide motor directions based on forward/backward/left/right
void getDesiredDirections(bool &m1F, bool &m1B, bool &m2F, bool &m2B){
  bool f= forwardCmd;
  bool b= backwardCmd;
  bool l= leftCmd;
  bool r= rightCmd;

  if(f&&!b&&!l&&!r){
    // forward
    m1F=true;  m1B=false;
    m2F=true;  m2B=false;
  } else if(b&&!f&&!l&&!r){
    // backward
    m1F=false; m1B=true;
    m2F=false; m2B=true;
  } else if(l&&!r&&!f&&!b){
    // left 
    m1F=true;  m1B=false;
    m2F=false; m2B=true;
  } else if(r&&!l&&!f&&!b){
    // right
    m1F=false; m1B=true;
    m2F=true;  m2B=false;
  } else {
    // stop
    m1F=false; m1B=false;
    m2F=false; m2B=false;
  }
}

// Check if reversing needed
bool requiresReversal(bool oF, bool oB, bool pF, bool pB){
  return (oF && pB) || (oB && pF);
}

// ------------------------------------------------------------------
// core logic for motor control
// ------------------------------------------------------------------
void controlMotors(){
  unsigned long now= millis();
  unsigned long delta= now-lastUpdateTime;
  lastUpdateTime= now;

  bool anyCmd= (forwardCmd||backwardCmd||leftCmd||rightCmd);

  bool m1F, m1B, m2F, m2B;
  getDesiredDirections(m1F,m1B,m2F,m2B);

  if(!anyCmd){
    // no commands => immediate stop
    currentSpeed=0;
    needsRampDown=false;
    setMotorSpeed(0,1, reverseMotor1, false,false,0);
    setMotorSpeed(2,3, reverseMotor2, false,false,0);
    old_m1F=m1F; old_m1B=m1B; old_m2F=m2F; old_m2B=m2B;
    return;
  }

  // see if we must ramp down 
  if(!needsRampDown){
    bool rev1= requiresReversal(old_m1F, old_m1B, m1F, m1B);
    bool rev2= requiresReversal(old_m2F, old_m2B, m2F, m2B);
    if( (rev1||rev2) && currentSpeed>0){
      needsRampDown=true;
      // store new directions 
      new_m1F=m1F; new_m1B=m1B; 
      new_m2F=m2F; new_m2B=m2B;
      m1F=old_m1F; m1B=old_m1B;
      m2F=old_m2F; m2B=old_m2B;
    }
  }

  if(needsRampDown){
    if(currentSpeed>0){
      currentSpeed-= (rampDownRate* (float)delta);
      if(currentSpeed<0) currentSpeed=0;
    }
    if(currentSpeed==0){
      needsRampDown=false;
      m1F=new_m1F; m1B=new_m1B;
      m2F=new_m2F; m2B=new_m2B;
    }
  } else {
    // ramp up
    if(currentSpeed< MOTOR_SPEED){
      currentSpeed+= (rampUpRate*(float)delta);
      if(currentSpeed> MOTOR_SPEED) currentSpeed=(float)MOTOR_SPEED;
    }
  }

  int spd=0;
  if(currentSpeed>0){
    spd=(int)currentSpeed;
    if(spd< MIN_PWM) spd= MIN_PWM;
  }

  setMotorSpeed(0,1, reverseMotor1, m1F,m1B, spd);
  setMotorSpeed(2,3, reverseMotor2, m2F,m2B, spd);

  old_m1F=m1F; old_m1B=m1B;
  old_m2F=m2F; old_m2B=m2B;
}

// ------------------------------------------------------------------
// Setup
// ------------------------------------------------------------------
void setupPinsAndPWMs(){
  // force some pins high if needed
  for(unsigned i=0; i< (sizeof(HIGH_PINS)/sizeof(HIGH_PINS[0])); i++){
    pinMode(HIGH_PINS[i], OUTPUT);
    digitalWrite(HIGH_PINS[i], HIGH);
  }
  // force some pins low if needed
  for(unsigned i=0; i< (sizeof(LOW_PINS)/sizeof(LOW_PINS[0])); i++){
    pinMode(LOW_PINS[i], OUTPUT);
    digitalWrite(LOW_PINS[i], LOW);
  }

  // set up LEDC for motor
  ledcSetup(0, 5000, 8);
  ledcSetup(1, 5000, 8);
  ledcSetup(2, 5000, 8);
  ledcSetup(3, 5000, 8);

  ledcAttachPin(PWM_PINS_1[0], 0);
  ledcAttachPin(PWM_PINS_1[1], 1);
  ledcAttachPin(PWM_PINS_2[0], 2);
  ledcAttachPin(PWM_PINS_2[1], 3);
}

void setup(){
  Serial.begin(115200);

  // disable Wi-Fi power saving => lowest latency
  WiFi.mode(WIFI_STA);
  esp_wifi_set_ps(WIFI_PS_NONE);

  setupPinsAndPWMs();

  if(esp_now_init()!= ESP_OK){
    Serial.println("ESP-NOW init error!");
    return;
  }
  esp_now_register_recv_cb(onDataRecv);

  Serial.println("Low-latency Nav code ready.");
  lastUpdateTime= millis();
}

void loop(){
  controlMotors();
  // minimal delay => lower latency
  delay(1);
}
